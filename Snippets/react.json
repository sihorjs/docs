{
    "import": {
        "prefix": "imp",
        "body": "import ${2:moduleName} from '${1:module}';$0"
    },
    "importDestructing": {
        "prefix": "imd",
        "body": "import { $2 } from '${1:module}';$0"
    },
    "exportComponent": {
        "prefix": "exc",
        "body": [
            "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/} from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}';",
            "",
            "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/};",
            ""
        ],
        "description": "Loads and exports component from index file"
    },
    "exportComponentContainer": {
        "prefix": "excc",
        "body": [
            "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Container from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}Container';",
            "",
            "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Container;",
            ""
        ],
        "description": "Loads and exports container from index file"
    },
    "exportDefault": {
        "prefix": "exp",
        "body": "export default $1;$0"
    },
    "exportDefaultAs": {
        "prefix": "exa",
        "body": "export { default as ${1:Component} } from './$1';$0"
    },
    "method": {
        "prefix": "met",
        "body": ["${1:methodName} = (${2:params}) => {", "\t${0}", "};", ""],
        "description": "Creates a method inside a class"
    },
    "propertyGet": {
        "prefix": "pge",
        "body": ["get ${1:propertyName}() {", "\treturn this.${0}", "}", ""],
        "description": "Creates a getter property inside a class"
    },
    "forEach": {
        "prefix": "fre",
        "body": [
            "${1:array}.forEach(${2:currentItem} => {",
            "\t${0}",
            "});",
            ""
        ],
        "description": "Creates a forEach statement"
    },
    "anonymousFunction": {
        "prefix": "anfn",
        "body": ["(${1:params}) => {", "\t${2}", "};", ""],
        "description": "Creates an anonymous function"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": ["const ${1:name} = (${2:params}) => {", "\t${3}", "};", ""],
        "description": "Creates a named function"
    },
    "destructingObject": {
        "prefix": "dob",
        "body": "const {${1:propertyName}} = ${2:objectToDestruct};",
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "dar",
        "body": "const [${1:propertyName}] = ${2:arrayToDestruct};",
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "sti",
        "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms});", ""],
        "description": "Executes the given function at specified intervals"
    },
    "setTimeOut": {
        "prefix": "sto",
        "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms});", ""],
        "description": "Executes the given function after the specified delay"
    },
    "consoleLog": {
        "prefix": "clg",
        "body": "console.log(${1:object});",
        "description": "Displays a message in the console"
    },
    "destructProps": {
        "prefix": "cp",
        "body": ["const { $1 } = this.props;"],
        "description": "Creates and assigns a local variable using props destructing"
    },
    "destructState": {
        "prefix": "cs",
        "body": ["const { $1 } = this.state;"],
        "description": "Creates and assigns a local variable using state destructing"
    },
    "import React": {
        "prefix": "imr",
        "body": ["import React from 'react';", ""]
    },
    "import React, { Component }": {
        "prefix": "imrc",
        "body": ["import React, { Component } from 'react';", ""]
    },
    "import React, { Component } & PropTypes": {
        "prefix": "imrcp",
        "body": [
            "import React, { Component } from 'react';",
            "import PropTypes from 'prop-types';",
            ""
        ]
    },
    "import PropTypes": {
        "prefix": "impt",
        "body": ["import PropTypes from 'prop-types';", ""]
    },
    "reactArrowFunctionComponentWithPropTypes": {
        "prefix": "rafcp",
        "body": [
            "import React from 'react';",
            "import PropTypes from 'prop-types';",
            "import './${1:${TM_FILENAME_BASE}}.scss';",
            "",
            "const ${1:${TM_FILENAME_BASE}} = props => {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t);",
            "}",
            "",
            "${1:${TM_FILENAME_BASE}}.propTypes = {",
            "",
            "};",
            "",
            "export default ${1:${TM_FILENAME_BASE}};",
            ""
        ],
        "description": "Creates a React Arrow Function Component system with PropTypes"
    },
    "reactClassComponentWithPropTypes": {
        "prefix": "rcep",
        "body": [
            "import React, { Component } from 'react';",
            "import PropTypes from 'prop-types';",
            "import './${1:${TM_FILENAME_BASE}}.scss';",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends Component {",
            "\tstatic propTypes = {",
            "",
            "\t};",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$0",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}",
            "",
            "export default ${1:${TM_FILENAME_BASE}};",
            ""
        ],
        "description": "Creates a React component class with PropTypes"
    },
    "classConstructor": {
        "prefix": "rconst",
        "body": [
            "constructor(props) {",
            "\tsuper(props)",
            "",
            "\tthis.state = {",
            "\t\t $0",
            "\t}",
            "}",
            ""
        ],
        "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments"
    },
    "emptyState": {
        "prefix": "est",
        "body": ["state = {", "\t$1", "};", ""],
        "description": "Creates empty state object. To be used in a constructor."
    },
    "componentDidMount": {
        "prefix": "cdm",
        "body": ["componentDidMount() {", "\t$0", "}", ""],
        "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
    },
    "componentDidUpdate": {
        "prefix": "cdup",
        "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
        "description": "Invoked immediately after the component's updates are flushed to the DOM."
    },
    "componentWillUnmount": {
        "prefix": "cwun",
        "body": ["componentWillUnmount() {", "\t$0", "}", ""],
        "description": "Invoked immediately before a component is unmounted from the DOM."
    },
    "componentRender": {
        "prefix": "ren",
        "body": [
            "render() {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t);",
            "}"
        ],
        "description": "Basic render."
    },
    "createRef": {
        "prefix": "cref",
        "body": ["this.${1:refName}Ref = React.createRef();", ""],
        "description": "Create ref statement used inside constructor"
    },
    "componentSetStateObject": {
        "prefix": "sst",
        "body": "this.setState({ $0 });",
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentSetStateFunc": {
        "prefix": "ssf",
        "body": ["this.setState(prevState => ({ $0 });", ""],
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentProps": {
        "prefix": "props",
        "body": "this.props.$0",
        "description": "Access component's props"
    },
    "componentState": {
        "prefix": "state",
        "body": "this.state.$0"
    },
    "propTypeArray": {
        "prefix": "pta",
        "body": "PropTypes.array,",
        "description": "Array prop type"
    },
    "propTypeArrayRequired": {
        "prefix": "ptar",
        "body": "PropTypes.array.isRequired,",
        "description": "Array prop type required"
    },
    "propTypeBool": {
        "prefix": "ptb",
        "body": "PropTypes.bool,",
        "description": "Bool prop type"
    },
    "propTypeBoolRequired": {
        "prefix": "ptbr",
        "body": "PropTypes.bool.isRequired,",
        "description": "Bool prop type required"
    },
    "propTypeFunc": {
        "prefix": "ptf",
        "body": "PropTypes.func,",
        "description": "Func prop type"
    },
    "propTypeFuncRequired": {
        "prefix": "ptfr",
        "body": "PropTypes.func.isRequired,",
        "description": "Func prop type required"
    },
    "propTypeNumber": {
        "prefix": "ptn",
        "body": "PropTypes.number,",
        "description": "Number prop type"
    },
    "propTypeNumberRequired": {
        "prefix": "ptnr",
        "body": "PropTypes.number.isRequired,",
        "description": "Number prop type required"
    },
    "propTypeObject": {
        "prefix": "pto",
        "body": "PropTypes.object,",
        "description": "Object prop type"
    },
    "propTypeObjectRequired": {
        "prefix": "ptor",
        "body": "PropTypes.object.isRequired,",
        "description": "Object prop type required"
    },
    "propTypeString": {
        "prefix": "pts",
        "body": "PropTypes.string,",
        "description": "String prop type"
    },
    "propTypeStringRequired": {
        "prefix": "ptsr",
        "body": "PropTypes.string.isRequired,",
        "description": "String prop type required"
    },
    "propTypeNode": {
        "prefix": "ptnd",
        "body": "PropTypes.node,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array"
    },
    "propTypeNodeRequired": {
        "prefix": "ptndr",
        "body": "PropTypes.node.isRequired,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array required"
    },
    "propTypeInstanceOf": {
        "prefix": "pti",
        "body": "PropTypes.instanceOf($0),",
        "description": "Is an instance of a class prop type"
    },
    "propTypeInstanceOfRequired": {
        "prefix": "ptir",
        "body": "PropTypes.instanceOf($0).isRequired,",
        "description": "Is an instance of a class prop type required"
    },
    "propTypeEnum": {
        "prefix": "pte",
        "body": "PropTypes.oneOf(['$0']),",
        "description": "Prop type limited to specific values by treating it as an enum"
    },
    "propTypeEnumRequired": {
        "prefix": "pter",
        "body": "PropTypes.oneOf(['$0']).isRequired,",
        "description": "Prop type limited to specific values by treating it as an enum required"
    },
    "propTypeOneOfType": {
        "prefix": "ptet",
        "body": ["PropTypes.oneOfType([", "\t$0", "]),"],
        "description": "An object that could be one of many types"
    },
    "propTypeOneOfTypeRequired": {
        "prefix": "ptetr",
        "body": ["PropTypes.oneOfType([", "\t$0", "]).isRequired,"],
        "description": "An object that could be one of many types required"
    },
    "propTypeArrayOf": {
        "prefix": "ptao",
        "body": "PropTypes.arrayOf($0),",
        "description": "An array of a certain type"
    },
    "propTypeArrayOfRequired": {
        "prefix": "ptaor",
        "body": "PropTypes.arrayOf($0).isRequired,",
        "description": "An array of a certain type required"
    },
    "propTypeShape": {
        "prefix": "ptsh",
        "body": ["PropTypes.shape({", "\t$0", "}),"],
        "description": "An object taking on a particular shape"
    },
    "propTypeShapeRequired": {
        "prefix": "ptshr",
        "body": ["PropTypes.shape({", "\t$0", "}).isRequired,"],
        "description": "An object taking on a particular shape required"
    },
    "staticPropTypes": {
        "prefix": "ptypes",
        "body": ["static propTypes = {", "\t$0", "};", ""]
    },
    "defaultProps": {
        "prefix": "dprops",
        "body": ["static defaultProps = {", "\t$0", "};", ""]
    },
    "functionalDefaultProps": {
        "prefix": "cdprops",
        "body": ["$TM_FILENAME_BASE.defaultProps = {", "\t$0", "};"]
    },
    "describeBlock": {
        "prefix": "desc",
        "body": ["describe('$1', () => {", "\t$0", "});", ""],
        "description": "Testing `describe` block"
    },
    "itBlock": {
        "prefix": "tit",
        "body": ["it('should $1', () => {", "\t$0", "});", ""],
        "description": "Testing `it` block"
    },
    "mobxContainer": {
        "prefix": "mob",
        "body": [
            "import { compose } from 'recompose';",
            "import { inject, observer } from 'mobx-react';",
            "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/} from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}';",
            "",
            "export default compose($0",
            "\tinject(${2:Store}),",
            "\tobserver,",
            ")(${TM_DIRECTORY/^.+\\/(.*)$/$1/});",
            ""
        ]
    },
    "importCompose": {
        "prefix": "imc",
        "body": "import { compose } from 'recompose';$0"
    },
    "importTranslation": {
        "prefix": "imt",
        "body": "import { withTranslation } from 'react-i18next';$0"
    },
    "importWithRouter": {
        "prefix": "imwr",
        "body": "import { withRouter } from 'react-router-dom';$0"
    },
    "withTranslation": {
        "prefix": "wt",
        "body": "withTranslation('$1')$0"
    },
    "withRouter": {
        "prefix": "wr",
        "body": "withRouter()$0"
    },
    "translation": {
        "prefix": "t",
        "body": "{t('$1')}$0"
    },
    "querySelector": {
        "prefix": "qs",
        "body": "const ${1:element} = document.querySelector('${2:selector}');$0"
    },
    "mobxStateTree": {
        "prefix": "mst",
        "body": "import { types, flow } from 'mobx-state-tree';$0"
    },
    "mobxStateTreeFlow": {
        "prefix": "flow",
        "body": ["${1:functionName}: flow(function* $1() {", "\t$0", "}),"]
    }
}
